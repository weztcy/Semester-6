# -*- coding: utf-8 -*-
"""Center of Mass + Velocity.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fT-p60rKa2hoE9BJUU1_uBJVyTv30OWV
"""

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def hitung_pusat_massa(posisi, massa):
    total_massa = np.sum(massa)
    pusat_massa = np.sum(posisi.T * massa, axis=1) / total_massa
    return pusat_massa

def hitung_kecepatan_pusat_massa(kecepatan, massa):
    total_massa = np.sum(massa)
    kecepatan_pusat_massa = np.sum(kecepatan.T * massa, axis=1) / total_massa
    return kecepatan_pusat_massa

def visualisasi_2d(posisi, pusat_massa, judul):
    plt.figure()
    warna = plt.cm.viridis(np.linspace(0, 1, len(posisi)))
    for i, pos in enumerate(posisi):
        plt.scatter(pos[0], pos[1], color=warna[i], label=f'Objek {i+1}')
    plt.scatter(pusat_massa[0], pusat_massa[1], color='red', label='Pusat Massa', edgecolor='black')
    plt.xlabel('X')
    plt.ylabel('Y')
    plt.title(judul)
    plt.legend()
    plt.grid(True)
    plt.show()

def visualisasi_3d(posisi, pusat_massa, judul):
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    warna = plt.cm.viridis(np.linspace(0, 1, len(posisi)))
    for i, pos in enumerate(posisi):
        ax.scatter(pos[0], pos[1], pos[2], color=warna[i], label=f'Objek {i+1}')
    ax.scatter(pusat_massa[0], pusat_massa[1], pusat_massa[2], color='red', label='Pusat Massa', edgecolor='black')
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')
    ax.set_title(judul)
    ax.legend()
    plt.show()

def visualisasi_kecepatan_2d(kecepatan, kecepatan_pusat_massa, judul):
    plt.figure()
    warna = plt.cm.viridis(np.linspace(0, 1, len(kecepatan)))
    for i, kecep in enumerate(kecepatan):
        plt.quiver(0, 0, kecep[0], kecep[1], color=warna[i], scale=1, scale_units='xy', angles='xy', label=f'Objek {i+1}')
    plt.quiver(0, 0, kecepatan_pusat_massa[0], kecepatan_pusat_massa[1], color='red', scale=1, scale_units='xy', angles='xy', label='Kecepatan Pusat Massa')
    plt.xlabel('Vx')
    plt.ylabel('Vy')
    plt.title(judul)
    plt.legend()
    plt.grid(True)
    plt.show()

def visualisasi_kecepatan_3d(kecepatan, kecepatan_pusat_massa, judul):
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    warna = plt.cm.viridis(np.linspace(0, 1, len(kecepatan)))
    for i, kecep in enumerate(kecepatan):
        ax.quiver(0, 0, 0, kecep[0], kecep[1], kecep[2], color=warna[i], label=f'Objek {i+1}')
    ax.quiver(0, 0, 0, kecepatan_pusat_massa[0], kecepatan_pusat_massa[1], kecepatan_pusat_massa[2], color='red', label='Kecepatan Pusat Massa')
    ax.set_xlabel('Vx')
    ax.set_ylabel('Vy')
    ax.set_zlabel('Vz')
    ax.set_title(judul)
    ax.legend()
    plt.show()

def main():
    while True:
        print("Menu:")
        print("1. Hitung Pusat Massa")
        print("2. Hitung Kecepatan Pusat Massa")
        print("3. Keluar")
        pilihan = input("Pilih opsi (1/2/3): ")

        if pilihan == '1':
            n = int(input("Masukkan jumlah objek: "))
            massa = []
            posisi = []
            for i in range(n):
                m = float(input(f"Masukkan massa untuk objek {i+1}: "))
                x = float(input(f"Masukkan koordinat x untuk objek {i+1}: "))
                y = float(input(f"Masukkan koordinat y untuk objek {i+1}: "))
                z = float(input(f"Masukkan koordinat z untuk objek {i+1}: "))
                massa.append(m)
                posisi.append([x, y, z])

            posisi = np.array(posisi)
            massa = np.array(massa)
            pusat_massa = hitung_pusat_massa(posisi, massa)

            print(f"Pusat Massa: {pusat_massa}")
            visualisasi_2d(posisi, pusat_massa, "Pusat Massa 2D")
            visualisasi_3d(posisi, pusat_massa, "Pusat Massa 3D")

        elif pilihan == '2':
            n = int(input("Masukkan jumlah objek: "))
            massa = []
            kecepatan = []
            for i in range(n):
                m = float(input(f"Masukkan massa untuk objek {i+1}: "))
                vx = float(input(f"Masukkan kecepatan x untuk objek {i+1}: "))
                vy = float(input(f"Masukkan kecepatan y untuk objek {i+1}: "))
                vz = float(input(f"Masukkan kecepatan z untuk objek {i+1}: "))
                massa.append(m)
                kecepatan.append([vx, vy, vz])

            kecepatan = np.array(kecepatan)
            massa = np.array(massa)
            kecepatan_pusat_massa = hitung_kecepatan_pusat_massa(kecepatan, massa)

            print(f"Kecepatan Pusat Massa: {kecepatan_pusat_massa}")
            visualisasi_kecepatan_2d(kecepatan, kecepatan_pusat_massa, "Kecepatan Pusat Massa 2D")
            visualisasi_kecepatan_3d(kecepatan, kecepatan_pusat_massa, "Kecepatan Pusat Massa 3D")

        elif pilihan == '3':
            print("Terima kasih! Program selesai.")
            break

        else:
            print("Opsi tidak valid. Silakan coba lagi.")

if __name__ == "__main__":
    main()